//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""LevelControl"",
            ""id"": ""a994ffd9-e913-4a3e-a5c1-89ac13542183"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""6bba2a53-de9a-4a70-9d81-1d1c4509a664"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickPosition"",
                    ""type"": ""Value"",
                    ""id"": ""c2af3058-7b3d-409e-b546-48d379f9021f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""90866db4-4546-4eab-a46f-1e850c17f3f3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2729be53-e04f-41dd-9b3c-787f227ec260"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // LevelControl
        m_LevelControl = asset.FindActionMap("LevelControl", throwIfNotFound: true);
        m_LevelControl_Click = m_LevelControl.FindAction("Click", throwIfNotFound: true);
        m_LevelControl_ClickPosition = m_LevelControl.FindAction("ClickPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LevelControl
    private readonly InputActionMap m_LevelControl;
    private List<ILevelControlActions> m_LevelControlActionsCallbackInterfaces = new List<ILevelControlActions>();
    private readonly InputAction m_LevelControl_Click;
    private readonly InputAction m_LevelControl_ClickPosition;
    public struct LevelControlActions
    {
        private @PlayerInputActions m_Wrapper;
        public LevelControlActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_LevelControl_Click;
        public InputAction @ClickPosition => m_Wrapper.m_LevelControl_ClickPosition;
        public InputActionMap Get() { return m_Wrapper.m_LevelControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelControlActions set) { return set.Get(); }
        public void AddCallbacks(ILevelControlActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelControlActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @ClickPosition.started += instance.OnClickPosition;
            @ClickPosition.performed += instance.OnClickPosition;
            @ClickPosition.canceled += instance.OnClickPosition;
        }

        private void UnregisterCallbacks(ILevelControlActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @ClickPosition.started -= instance.OnClickPosition;
            @ClickPosition.performed -= instance.OnClickPosition;
            @ClickPosition.canceled -= instance.OnClickPosition;
        }

        public void RemoveCallbacks(ILevelControlActions instance)
        {
            if (m_Wrapper.m_LevelControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelControlActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelControlActions @LevelControl => new LevelControlActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface ILevelControlActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnClickPosition(InputAction.CallbackContext context);
    }
}
